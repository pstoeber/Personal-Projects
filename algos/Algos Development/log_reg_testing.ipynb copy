{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pymysql\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "%matplotlib inline\n",
    "conn = pymysql.connect(host='localhost', user='root', password='Sk1ttles', db='nba_stats_prod')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_set = \"\"\"select  adv.game_hash,\n",
    "                   adv.team,\n",
    "                   adv.win_lose,\n",
    "                   adv.ast_pct,\n",
    "                   adv.ast_to_to,\n",
    "                   adv.ast_ratio,\n",
    "                   adv.offensive_reb_pct,\n",
    "                   adv.defensive_reb_pct,\n",
    "                   adv.reb_pct,\n",
    "                   adv.to_pct,\n",
    "                   adv.effective_fg_pct,\n",
    "                   adv.ts_pct,\n",
    "                   adv.pace,\n",
    "                   score.pct_2pt_fg,\n",
    "                   score.pct_3pt_fg,\n",
    "                   score.pct_pts_2pt,\n",
    "                   score.pct_pts_2pt_mr,\n",
    "                   score.pct_pts_3pt,\n",
    "                   score.pct_pts_fbps,\n",
    "                   score.pct_pts_ft,\n",
    "                   score.pct_pts_off_to,\n",
    "                   score.pct_pts_pitp,\n",
    "                   misc.FBPS,\n",
    "                   misc.opp_fbps,\n",
    "                   trad.fga,\n",
    "                   trad.3pa,\n",
    "                   trad.fta,\n",
    "                   trad.oreb,\n",
    "                   trad.dreb,\n",
    "                   trad.tot_reb,\n",
    "                   trad.ast,\n",
    "                   trad.tov,\n",
    "                   trad.stl,\n",
    "                   trad.blk\n",
    "            from team_advanced_boxscore_stats as adv\n",
    "            inner join team_misc_boxscore_stats as misc on ( (adv.team = misc.team) and (adv.game_hash = misc.game_hash) )\n",
    "            inner join team_figure4_boxscore_stats as fig on ( (misc.team = fig.team) and (misc.game_hash = fig.game_hash) )\n",
    "            inner join team_scoring_boxscore_stats as score on ( (fig.team = score.team) and (misc.game_hash = score.game_hash) )\n",
    "            inner join team_traditional_boxscore_stats as trad on ( (score.team = trad.team) and (score.game_hash = trad.game_hash) )\n",
    "            inner join box_scores_map_view as bm on ( (trad.game_hash = bm.game_hash) and (\n",
    "                    trad.team = bm.team) )\n",
    "            inner join game_date_lookup as lu on bm.game_date = lu.day\n",
    "            inner join team_standings as stand on ( (bm.team = stand.team) and (lu.season = stand.season) )\n",
    "            where lu.season > 2012 and\n",
    "                  stand.conference like 'Eastern%' and\n",
    "                  bm.team not like 'Washington%'\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_set = \"\"\"select  adv.game_hash,\n",
    "       adv.team,\n",
    "       adv.win_lose,\n",
    "       adv.ast_pct,\n",
    "       adv.ast_to_to,\n",
    "       adv.ast_ratio,\n",
    "       adv.offensive_reb_pct,\n",
    "       adv.defensive_reb_pct,\n",
    "       adv.reb_pct,\n",
    "       adv.to_pct,\n",
    "       adv.effective_fg_pct,\n",
    "       adv.ts_pct,\n",
    "       adv.pace,\n",
    "       score.pct_2pt_fg,\n",
    "       score.pct_3pt_fg,\n",
    "       score.pct_pts_2pt,\n",
    "       score.pct_pts_2pt_mr,\n",
    "       score.pct_pts_3pt,\n",
    "       score.pct_pts_fbps,\n",
    "       score.pct_pts_ft,\n",
    "       score.pct_pts_off_to,\n",
    "       score.pct_pts_pitp,\n",
    "       misc.FBPS,\n",
    "       misc.opp_fbps,\n",
    "       trad.fga,\n",
    "       trad.3pa,\n",
    "       trad.fta,\n",
    "       trad.oreb,\n",
    "       trad.dreb,\n",
    "       trad.tot_reb,\n",
    "       trad.ast,\n",
    "       trad.tov,\n",
    "       trad.stl,\n",
    "       trad.blk\n",
    "from team_advanced_boxscore_stats as adv\n",
    "inner join team_misc_boxscore_stats as misc on ( (adv.team = misc.team) and (adv.game_hash = misc.game_hash) )\n",
    "inner join team_figure4_boxscore_stats as fig on ( (misc.team = fig.team) and (misc.game_hash = fig.game_hash) )\n",
    "inner join team_scoring_boxscore_stats as score on ( (fig.team = score.team) and (misc.game_hash = score.game_hash) )\n",
    "inner join team_traditional_boxscore_stats as trad on ( (score.team = trad.team) and (score.game_hash = trad.game_hash) )\n",
    "inner join box_scores_map_view as bm on ( (trad.game_hash = bm.game_hash) and (\n",
    "        trad.team = bm.team) )\n",
    "inner join game_date_lookup as lu on bm.game_date = lu.day\n",
    "inner join team_standings as stand on ( (bm.team = stand.team) and (lu.season = stand.season) )\n",
    "where lu.season > 2012 and\n",
    "      stand.conference like 'Eastern%' and\n",
    "      bm.team like 'Boston%'\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = pd.read_sql(sql=training_set, con=conn, index_col=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df = pd.read_sql(sql=test_set, con=conn, index_col=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_dummies(col):\n",
    "    return pd.get_dummies(col, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_train = get_dummies(train_df['win_lose'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_test = get_dummies(test_df['win_lose'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = pd.concat([train_df, results_train], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df.drop(['game_hash', 'team', 'win_lose'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df = pd.concat([test_df, results_test], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df.drop(['game_hash', 'team', 'win_lose'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "lg = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lg.fit(train_df.drop('W', axis=1), train_df['W'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = lg.predict(test_df.drop('W', axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[204  25]\n",
      " [ 48 211]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(test_df['W'], predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.81      0.89      0.85       229\n",
      "          1       0.89      0.81      0.85       259\n",
      "\n",
      "avg / total       0.85      0.85      0.85       488\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(test_df['W'], predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sns.pairplot(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
